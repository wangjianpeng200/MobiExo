#include <ros/ros.h>
#include <geometry_msgs/Pose2D.h>
#include <nav_msgs/Path.h>
#include <visualization_msgs/Marker.h>
#include <tf2/LinearMath/Quaternion.h>  // 用于四元数转换
#include <fstream>
#include <sstream>
#include <vector>
#include <cmath>
#include <tf/transform_listener.h>
#include <tf/transform_datatypes.h>
#include <tf/tf.h>

class PurePursuit
{
public:
  PurePursuit(ros::NodeHandle &nh)
    : last_lookahead_index_(0)  // 初始化 last_lookahead_index_ 为 0
  {
    // 订阅车辆当前位置
    pose_sub_ = nh.subscribe("cur_pose", 1, &PurePursuit::poseCallback, this);
    // 发布路径和预瞄点位置
    path_pub_ = nh.advertise<nav_msgs::Path>("path", 1);
    marker_pub_ = nh.advertise<visualization_msgs::Marker>("visualization_marker", 1);
    
    // 读取路径
    readPath("/home/nvidia/Desktop/gps_pursuit_control/src/path_publisher/src/pose_data.txt");

    // 设置预瞄点的距离
    lookahead_distance_ = 2.0;
  }

  void compute_angle(const std::pair<double, double> lookahead_point_)
  {
    double dx = lookahead_point_.first - vehicle_pos_.x;
    double dy = lookahead_point_.second - vehicle_pos_.y;
    double x_prime = dx * cos(robot_yaw) + dy * sin(robot_yaw);
    double y_prime = -dx * sin(robot_yaw) + dy * cos(robot_yaw);
    double theta = atan2(x_prime, y_prime); 
    ROS_ERROR_THROTTLE(1, "%f", theta);
  }

  void poseCallback(const geometry_msgs::Pose2D::ConstPtr &msg)
  {
    // 当前车辆位置
    vehicle_pos_ = *msg;

    // 更新路径中的预瞄点
    updateLookaheadPoint();

    // 可视化路径和预瞄点
    visualize();
  }

  void readPath(const std::string &path_file)
  {
    std::ifstream file(path_file);
    std::string line;
    while (std::getline(file, line))
    {
      std::stringstream ss(line);
      double x, y;
      ss >> x >> y;
      path_points_.push_back({x, y});
    }
  }

  void updateLookaheadPoint()
  {
    // 从上次找到的路径点索引开始，避免每次从0开始
    for (size_t i = last_lookahead_index_; i < path_points_.size(); ++i)
    {
      double dx = path_points_[i].first - vehicle_pos_.x;
      double dy = path_points_[i].second - vehicle_pos_.y;
      double distance = std::sqrt(dx * dx + dy * dy);

      // 找到第一个超过预瞄点距离的路径点
      if (distance > lookahead_distance_)
      {
        lookahead_point_ = path_points_[i];
        last_lookahead_index_ = i; // 更新索引
        break;
      }
    }
    compute_angle(path_points_[i]);
  }

  void visualize()
  {
    // 可视化路径
    nav_msgs::Path path_msg;
    path_msg.header.stamp = ros::Time::now();
    path_msg.header.frame_id = "map";
    for (const auto &point : path_points_)
    {
      geometry_msgs::PoseStamped pose;
      pose.header.frame_id = "map";
      pose.pose.position.x = point.first;
      pose.pose.position.y = point.second;
      path_msg.poses.push_back(pose);
    }
    path_pub_.publish(path_msg);
    tf::StampedTransform transform;
    double roll, pitch, yaw;
    try
    {
        // 获取 base_link 到 map 坐标系的变换
        tf_listener.lookupTransform("/map", "/base_link", ros::Time(0), transform);
        // 提取出 base_link 的 yaw 值
        // double roll, pitch, yaw;
        transform.getBasis().getRPY(roll, pitch, yaw);
        yaw += M_PI / 2;
        robot_yaw = yaw;
    }
    catch (tf::TransformException &ex)
    {
        ROS_WARN("Could not get transform: %s", ex.what());
    }
    // 可视化车辆位置和朝向
    visualization_msgs::Marker vehicle_marker;
    vehicle_marker.header.frame_id = "map";
    vehicle_marker.header.stamp = ros::Time::now();
    vehicle_marker.ns = "vehicle";
    vehicle_marker.id = 0;
    vehicle_marker.type = visualization_msgs::Marker::CYLINDER;  // 使用圆柱体表示车辆
    vehicle_marker.action = visualization_msgs::Marker::ADD;
    vehicle_marker.pose.position.x = vehicle_pos_.x;
    vehicle_marker.pose.position.y = vehicle_pos_.y;
    vehicle_marker.scale.x = 1.0;  // 长度
    vehicle_marker.scale.y = 0.5; // 宽度
    vehicle_marker.scale.z = 0.3; // 高度
    vehicle_marker.color.r = 1.0;
    vehicle_marker.color.g = 0.0;
    vehicle_marker.color.b = 0.0;
    vehicle_marker.color.a = 1.0;

    // 计算四元数（旋转）
    tf2::Quaternion q;
    q.setRPY(0, 0, yaw);  // 根据车辆朝向角计算四元数
    vehicle_marker.pose.orientation.x = q.x();
    vehicle_marker.pose.orientation.y = q.y();
    vehicle_marker.pose.orientation.z = q.z();
    vehicle_marker.pose.orientation.w = q.w();

    // 可视化预瞄点
    visualization_msgs::Marker lookahead_marker;
    lookahead_marker.header.frame_id = "map";
    lookahead_marker.header.stamp = ros::Time::now();
    lookahead_marker.ns = "lookahead_point";
    lookahead_marker.id = 1;
    lookahead_marker.type = visualization_msgs::Marker::SPHERE;
    lookahead_marker.action = visualization_msgs::Marker::ADD;
    lookahead_marker.pose.position.x = lookahead_point_.first;
    lookahead_marker.pose.position.y = lookahead_point_.second;
    lookahead_marker.scale.x = 0.5;
    lookahead_marker.scale.y = 0.5;
    lookahead_marker.scale.z = 0.5;
    lookahead_marker.color.r = 0.0;
    lookahead_marker.color.g = 1.0;
    lookahead_marker.color.b = 0.0;
    lookahead_marker.color.a = 1.0;

    // 发布标记
    marker_pub_.publish(vehicle_marker);
    marker_pub_.publish(lookahead_marker);
  }

private:
  ros::Subscriber pose_sub_;
  ros::Publisher path_pub_;
  ros::Publisher marker_pub_;

  geometry_msgs::Pose2D vehicle_pos_;
  std::vector<std::pair<double, double>> path_points_;
  std::pair<double, double> lookahead_point_;
  double lookahead_distance_;
  size_t last_lookahead_index_; // 记录上次找到的路径点索引
  tf::TransformListener tf_listener;
  double robot_yaw;

};

int main(int argc, char **argv)
{
  ros::init(argc, argv, "pure_pursuit");
  ros::NodeHandle nh;
  PurePursuit pure_pursuit(nh);
  ros::spin();
  return 0;
}
